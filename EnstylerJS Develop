// ==UserScript==
// @name        EnstylerJS Develop
// @namespace   EnstylerDevelop2
// @description MyDealz Enstyler enhanced features incl. Amazon Mobile Redirect
// @include     https://nl.pepper.com/*
// @include     https://www.preisjaeger.at/*
// @include     https://www.mydealz.de/*
// @include     https://userstyles.org/styles/128262/*
// @include     https://www.amazon.*/gp/aw/*
// @version     3.03.022
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlhttpRequest
// @require     https://cdnjs.cloudflare.com/ajax/libs/zepto/1.2.0/zepto.min.js
// @require     http://openuserjs.org/src/libs/sizzle/GM_config.js
// @run-at      document-start
// ==/UserScript==
// ========== INIT EnstylerJS =====================================
// init Enstyler environment
// Parse location and site for later use
const enLocParser=location;
const enInternationalSite=enLocParser.hostname.replace('www\.','');
// get name of international site without domain, BUT if its pepper keep domain
//const enInternationalName=enInternationalSite.indexOf('pepper')==-1 ? capitalizeFirstLetter(enInternationalSite.replace(/^\.|\..*/g,'')) : enInternationalSite;
const enInternationalName=capitalizeFirstLetter(enInternationalSite.replace(/^\.|\..*/g,''));
const enInternational=(enInternationalName != 'Mydealz');

// Mydealz, Preisjaeger and usertyles default german, everthing else english
var enLANG= (enInternationalName.match(/mydealz|preisjaeger|userstyle/i)) ? 'de' : 'en';
const enLangPat=/<EN-LANG:(.*?)>/g;

// read user selected LANG
const myLang=GM_getValue('enLang', '');
if(myLang == '' ) {
    GM_setValue('enLANG', '');
} else {
    enLANG=myLang;
}

// 1 day between update checks (in minutes)
var enUpdateInterval=1 * (24*60);

// dom we run on FF? GM hast no scriptHandler, USI may or may not, so NOT Tampermonkey is OK
var isMozilla=(typeof GM_info.scriptHandler === "undefined" || !GM_info.scriptHandler.startsWith('Tamp'))

var enUserLogin = false;
var enUserName = '';
var enSection = '';

const DEBUG=true;
if (DEBUG) {
    var  enInitTime = performance.now();
    console.error('DEBUG activated');
    console.error('International Site: '+enInternationalSite)
    console.error('International Name: '+enInternationalName)
    // output location, remove * to activate
    console.error('URL : '+enLocParser.toString());     // http://example.com:300/pathname?search=test#hash
    //console.error('protocol : '+enLocParser.protocol); // => "http:"
    console.error('hostname : '+enLocParser.hostname);   // => "example.com"
    //console.error('    port : '+enLocParser.port);     // => "3000"
    //console.error('host+port: '+enLocParser.host);     // => "example.com:3000"
    console.error('pathname : '+enLocParser.pathname); // => "/pathname/"
    console.error('  search : '+enLocParser.search);   // => "?search=test"
    console.error('    hash : '+enLocParser.hash);     // => "#hash"
    //console.log(GM_getValue('Enstyler2_CSS'));
    /**/
    // set update check to x minutes
    enUpdateInterval=5;
} 

// Basic Initialisation ==========================

function EnstylerInit () {    
        // get LoginStatus and Username
        if (enUserLogin = $('.avatar--type-nav').length) {
            enUserName = $('.navDropDown a').attr(enHREF);
            enUserName = enUserName.replace(/.*\/profile\/([^\/]+).*/,'$1');
            if(DEBUG) console.error('User: ' +enUserName);
        } else {
            //restore old last seen if user logs in
            // use this variant for dynamic loaded content click ...
            $(document).on("click",'.test-loginButton', EnstylerLastSeenLast);
        }
        // get Section (first element in path)
        enSection= enLocParser.pathname.replace(/\/([^\/]+\/*).*/,'/$1');
        if(DEBUG) console.error('Section: ' +enSection);
}


// add actions @ some places ==================================

// additional Deal Actions =======================
// code used for MyDealz Dealz actions, thanks to mydealz :-)
  const enDealAction = [ '<a title="<EN-LANG:post>" class="link ico ico--pos-l ico--type-comment-blue linkPlain space--mr-3"'+ // comment 0+1+3
                       'href="<ENSTYLER-HREF-HERE>#comment-form" data-handler="track" data-track="{&quot;action&quot;:&quot;scroll_to_comment_add_form&quot;,&quot;label&quot;:&quot;engagement&quot;}">',
                       '<span class="hide--toW3"><EN-LANG:post></span><span class="hide--fromW3 hide--toW2"><EN-LANG:po></span>', '', '</a>',
                       '<a title="<EN-LANG:remove>" class="link text--color-blue ico ico--type-bookmark-blue linkPlain ico--pos-l space--mr-3"' + //un-bookmark 4+5+7
                       'data-handler="track replace" data-replace="{&quot;endpoint&quot;:&quot;https:\/\/www.mydealz.de\/threads\/<ENSTYLER-THREADID-HERE>/remove&quot;,&quot;method&quot;:&quot;post&quot;}" data-track="{&quot;action&quot;:&quot;save_thread&quot;,&quot;label&quot;:&quot;engagement&quot;}">',
                       '<span class="hide--toW3"><EN-LANG:remove></span><span class="hide--fromW3 hide--toW2"><EN-LANG:rem></span>', '', '</a>',
                       '<a title="<EN-LANG:edit>" class="link text--color-blue ico ico--type-pencil-blue linkPlain ico--pos-l space--mr-3"'+ // edit 8+9+11
                       'href="<ENSTYLER-HREF-HERE>/edit" data-handler="track" data-track="{&quot;action&quot;:&quot;goto_thread_edit_form&quot;,&quot;beacon&quot;:true}">',
                       '<span class="hide--toW3"><EN-LANG:edit></span><span class="hide--fromW3 hide--toW2"><EN-LANG:ed></span>', '', '<span></a>',
                       '<a title="<EN-LANG:mail>" class="link text--color-blue ico ico--type-code-blue linkPlain ico--pos-l space--mr-3"'+ // mail 12+13+15
                       'href="mailto:?subject=<ENSTYLER-TEXT-HERE>" <span class="hide--toW3">',
                       '<span class="hide--toW3"><EN-LANG:mail></span><span class="hide--fromW3 hide--toW2"><EN-LANG:ma></span>', '', '<span></a>',
                       ];

  const enDealLang = { de: { post: 'Sag was dazu', remove: 'Von Liste entfernen', edit: 'Bearbeiten', mail: 'Mail versenden',
                             po: 'Sag',            rem: 'Entf',                   ed: 'Bearb',        ma: 'Mail' },
                       en: { post: 'post a comment', remove: 'remove from list', edit: 'edit', mail: 'send as mail',
                             po: 'post',             rem: 'remove',              ed: 'edit',   ma: 'mail' },
                       nl: { post: 'post a comment', remove: 'remove from list', edit: 'edit', mail: 'send as mail',
                             po: 'post',             rem: 'remove',              ed: 'edit',   ma: 'mail' }
                     }

  const enDealMarker='#thread_';
  //const enDealNoAction='.ico--type-clock-grey, .vote-temp--colder';
  var enDealAdd='', enDealUnbook=false;
  var enDealFooter='';
 
function EnstylerDealActions(){
  // if enabled ...
  if (GM_config.get('enConfDealAction')) {
    // compose Footer
    if ($('footer ul').length) enDealFooter = ('%0D%0A%0D%0A-- %0D%0A'+ $('footer ul li p').first().html().replace(/<br>/g,'%0D%0A').replace(/<.*?>/g,''));
      
    // use parsed location
    var pathname = enLocParser.pathname;
    var myText=0;
    // no username ??
    if (enUserName != "") {
       pathname = pathname.replace(enUserName + '/',''); // remove username if path is longer
    }  
    // display short/no text?
    if ($('.ico--type-grid-subNavActive').length) { myText=1; }
        
    // default for all Dealz: first comment
    enDealAdd = enDealAction[0]+ enDealAction[1+myText] + enDealAction[3];

    // Action for special locations only ===========
    switch(true) {
      case (pathname.endsWith('profile/saved-deals')):
         // add for user saved-dealz: un-bookmark
         enDealAdd += enDealAction[4]+ enDealAction[5+myText]; + enDealAction[7];
         enDealUnbook=true;
         break;
         
      case (pathname.endsWith('profile/diskussion')):
      case (enUserLogin && pathname.endsWith(enUserName)):
         // add user dealz and discussions: comment edit
         enDealAdd +=  enDealAction[8]+ enDealAction[9+myText] + enDealAction[11];
         break;
    }
    // default last: add mail to
    // Compose final Deal Actions 
    enDealAdd= enLangLocalize(enDealActionPreHtml + enDealAdd + enDealAction[12]+ enDealAction[13+myText] + enDealAction[15] + '</span>'
                              , enDealLang, enLANG);
      

   }
   // do it ...
    EnstylerAvatarPopup()
    EnstylerDealActionsDo();            
}

// surrounding myDealz HTML
const enDealActionPreHtml  = '<span class="js-options bg--em bRad--a space--h-3 space--v-3 space--mt-3 text--b">';

function EnstylerDealActionsDo() {
  // if enabled ...
  var myDealAction=GM_config.get('enConfDealAction'); 
  var myTouch=GM_config.get('enConfTouch');
  var myAvatar=enUserLogin && GM_config.get('enConfPopup');
  var myFixHtml=GM_config.get('enConfFixHtml');
    
  // every thread on thread page, raise var scope ...
  var myInfoRow, myDeal, myDealHref, mySub, newHtml;
  var myAvatarSize=/avatar--type-s/;
    
  if (!(myDealAction || myTouch || myAvatar || myFixHtml)) return;
  if (myTouch) myAvatarSize=/avatar--type-s|thread-avatar/g;
    
  // process articles
  $('article').not('.enClassActionDone, .threadWidget-item, .'+enClassHidden).each(function () {
      // add deal actions
      if(myDealAction) myInfoRow=$('.thread-infoRow', $(this));
      if (myDealAction && myInfoRow.length) {
        // get Titel, Link, DealID num
        myDeal =$('.thread-title a', $(this));
        myDealHref = myDeal.attr(enHREF);

        // compose mail subject
        mySub=encodeURIComponent(enInternationalName+': '+myDeal.text());
        if (mySub.length < 100 && $(this).find('.thread-price').length) {
            // add ' ->\xa0price'
            mySub += encodeURIComponent(' ->\xa0' + $(this).find('.thread-price').text().replace(/ |\t/g, ''));
        }
                         
        // compose final HTML
        newHtml = enDealAdd.replace(enPATTERN[enHREF], myDealHref)
                               .replace(enPATTERN[enTEXT], truncStringWord(mySub, 160, '%20') +'&body=' +mySub +'%0D%0A%0D%0A' +myDealHref +enDealFooter);
        if (enDealUnbook) {newHtml = newHtml.replace(enPATTERN[enID], ('#'+$(this).attr(enID)).replace(enDealMarker,''));}
        
        // append HTML to Deal
        myInfoRow.append(newHtml);
        myInfoRow.removeClass('thread-infoRow');
      }
      
      // touch optimization deal Image: remove link, fix lazy loading
      if (myTouch) {
          // get elem one
          newHtml=$(this).find('.aGrid');
          // replace link href= and fix lazy loading
           if (newHtml.length) { newHtml.html(newHtml.html().replace(/(<a .*?") href=/,  '$1 noklick=')
                       .replace(/ img--dummy.*" data-lazy-img="{&quot;src&quot;:&quot;/, '" src="')
                       .replace(/&quot;,&quot;finishClass&quot;:.* alt="/,'" alt="'));
              }
      }
      
      // actions for somewhere  ===========
      // remove unwanted HTML from deal description
      if(myFixHtml) {
          $(this).find('.userHtml').each(function () {
             // get inner html
             // remove unwanted Stuff: combined <div><br><br> stuff, created by cut'npaste html
             // not elegant, but works ...
             $(this).html($(this).html() .replace(/[^ -~Ä-ü]+|(&nbsp;)+|(\n\r)+|<\/p>|<\/div>/g,' ')
                     .replace(/<div>|<p>|(<br> *<br>)( |<br>)*/g,'<br><br>')
                     .replace(/(<li>)(<br>)+|<br>*(<br><\/li>)/g, '$1')
                    );
        });
      }
      // moved from avatarPopupDo() login needed ... (Error in Popup without login ...)
      // replace every avatar link without popup, raise var scope
      if (myAvatar) {    
        $(this).find('a.user').each(function () {
            // get inner html and link to user profile
            newHtml = $(this).html();
            mySub = $(this).attr(enHREF);
            
            // seperate user name from image and add class user
            myDeal = newHtml.replace(/<span.*/,'')
                            .replace(myAvatarSize,'avatar--type-m');

            // compose popup
            $(this).html(enPopupUser[0] + mySub + enPopupUser[1] + myDeal +  enPopupUser[2]
                          + '<a href="' + mySub + '">'+ newHtml.replace(/.*<span class=".* space--mr-1">/,'<span class=" space--mr-1 user link-plain">')
                          + '</a>');
        });
      }
      
      $(this).addClass('enClassActionDone')
  });


}


// show popup user info while click on avatar ... ======================
function EnstylerAvatarPopup(){
    if (enUserLogin && GM_config.get('enConfPopup')) {
        // remove second image from cardview
        addStyleString('.thread-footer-cell a img.avatar.vAlign--all-m.space--mr-1.thread-avatar {display: none;}');
        
        // moved to DealActionDo
        //EnstylerAvatarPopupDo();
    }
}

// code used for MyDealz avatar popup, thanks to mydealz :-)
const enPopupUser = ['<button data-handler="track popover" data-track="{&quot;action&quot;:&quot;show_short_user_profile&quot;,&quot;label&quot;:&quot;engagement&quot;}" data-popover="{&quot;endpoint&quot;:&quot;',
                   '/short&quot;,&quot;target&quot;:&quot;#template-popoverLoader&quot;,&quot;layout&quot;:[{&quot;preset&quot;:&quot;e&quot;,&quot;y&quot;:&quot;50%&quot;,&quot;left&quot;:{&quot;offset&quot;:0},&quot;width&quot;:300,&quot;maxWidth&quot;:&quot;100%&quot;}]}">',
                   '</button>',
                  ];

const enClassAvatarDone = 'enClassAvatarDone';

//function EnstylerAvatarPopupDo() {
// moved to dealActionD0
//    return;
//}

/*
    // login needed ... (Error in Popup without login ...)
    // replace every avatar link without popup, raise var scope
        if (enUserLogin && GM_config.get('enConfPopup')) {
        var myHtml, mysrc, myAvatar;
        var myBigAvatar=GM_config.get('enConfAvatar');
        // each avatar
        $('.thread-footer-cell a.user.linkPlain, .user.linkPlain.thread-user').not('.'+enClassAvatarDone).each(function () {
            $(this).addClass(enClassAvatarDone);
            
            // get inner html and link to user profile
            myHtml = $(this).html();
            mysrc = $(this).attr(enHREF);
            
            // seperate user name from image and add class user
            myAvatar = myHtml.replace(/<span.*XX/,'').replace(/avatar--type-s/,'avatar--type-m');
  
            if (myBigAvatar) { myAvatar =  myAvatar.replace(/thread-avatar/,'avatar--type-m'); } 
            
            // compose popup
            $(this).html(enPopupUser[0] + mysrc + enPopupUser[1] + myAvatar +  enPopupUser[2]
                          + '<a href="' + mysrc + '">'+ myHtml.replace(/.*<span class=".* space--mr-1">/,'<span class=" space--mr-1 user link-plain">')
                          + '</a>');
        });
    }
*/



// create select page or scrollwheel for page navigation =============
const EnstylerPageEnum='enPageEnum';

const selectList = document.createElement("select");
selectList.id = EnstylerPageEnum;
selectList.setAttribute('class', EnstylerPageEnum);
selectList.onchange = EnstylerPageAction; 

function EnstylerPagePickerCreate() {
 // revome existing picker
 EnstylerPagePickerRemove();
    
 // if enabled
 if (GM_config.get('enConfPagePicker')) {
   // init values and clear select list
   var page=1, max=1, i, diff, last, option;
   $(selectList).empty();
     
   // get page and max from pagenav
   if ( $('div.text--color-charcoalTint').length ) {
       // remove linebreaks
       var pageHtml = $('nav > div.text--color-charcoalTint').html().replace(/\r?\n|\r/g);
       //locate actual page and last page
       if( isNaN(page = parseInt(pageHtml.replace( RegExp('.*>'+EnstylerSiteConfig('page'), 'i')  ,'')) )) { page=1;}
       if( isNaN(max  = parseInt(pageHtml.replace( /.*page=/ ,'')) ))    { max=page;}
   }

   // create page select element
   for (x = 1; x <= max; ) {

       option = document.createElement("option");
       option.text = x;
       selectList.add(option);
       last = x;
   
       // non linear increment
       diff = Math.abs(x-page);

       if ( x < 10 || diff < 5) { x++; }
       else if ( x < 1000 && diff > 600) { x += Math.floor(diff/100); }
       else { x += Math.floor(diff/2); }
   }
   
     
   // add last page
   if (page > max) { max=page;}
   if (last < max ) {
       option = document.createElement("option");
       option.text = max;
       selectList.add(option);
   }
   // set default value
   selectList.value = page;

   // placement of MAIN Picker
   var MainPicker= ['.js-navDropDown-messages', //Element
                  EnstylerPageEnum+' js-navDropDown-messages vAlign--all-m' //class
               ];
   // login button present in Mainnav
   if ($('.test-loginButton').length) {
          MainPicker[0]='.test-loginButton'; //Element
   }
   // in deal always in sticky votebar (was in subnav)
   if ($('.voteBar').length) {
          MainPicker= [ '.voteBar--sticky-off--hide.hAlign--all-r', // Element
                        EnstylerPageEnum +' subNavMenu-link subNavMenu-btn voteBar--sticky-off--hide' //class 
                      ];
   }

   // Main  Picker add class and palce before element
   selectList.setAttribute('class',MainPicker[1]);
   $(MainPicker[0]).before(selectList);
 }
}

function EnstylerPagePickerDo() {
   // get page and max from pagenav
   if ( $('.js-sticky .text--color-charcoalTint').length ) {
       //locate actual page incl remove line breaks
       // set default value
       selectList.value = parseInt($('button.vwo-pagination-page-current').html().replace(/\r?\n|\r/g).split( '--toW2">'+ EnstylerSiteConfig('page'))[1]);
   }
}

// goto selected Page
function EnstylerPageAction() {
    var enPage = 'page=' + $(this).val();

    // remove page= and everthing behind
    var enUrl = enLocParser.toString().replace( /page=.*|#.*/ ,'');
    
    // add new page parameter
    if ( enUrl.endsWith('?') ||  enUrl.endsWith('&')) {
        enUrl += enPage;
    } else {
        enUrl += '?'+enPage;
    }
    
    // add #thread-comments for deal
    if (enSection == '/deals/') { enUrl += '#thread-comments';}
    window.location = enUrl;
}

function EnstylerPagePickerRemove() {
        // Removes pagepicker from the document
        $('.'+ EnstylerPageEnum).remove();
}



// blacklist do not show dealz containing blacklistet words ==========================
// search in kategorie, dealtitle, and username
const enClassHidden = 'enClassHidden';
const enClassBlackDone = 'enClassBlackDone';
var enBlacklisted=0;

const unwantedRegex = [ /[\[\]\(\)\{\}\?\:\;\!\"\*\+\ ]/g, // in White/Backlist
                      /[\[\]\(\)\{\}\?\.\:\;\!\"\*\+\,]/g  // in Dealtext
                    ]; 
var enBlack, enBlackTrue;
var enWhite, enWhiteTrue;
var enBlackTemp;
function EnstylerBlacklist() {
 // if logged in and user is not in whitelist
    if (enUserLogin && ! GM_config.get('enConfWhitelist').includes(enUserName)) {
        // add actual user to whitelist
        GM_config.set('enConfWhitelist', '@'+enUserName +',' + GM_config.get('enConfWhitelist'));
        GM_config.setValue('enConfWhitelist', GM_config.get('enConfWhitelist'));
    }
   
    // convert Black/Whitelist to RegEx, escape regex characters but keep '.' for any char
    enBlack=RegExp(GM_config.get('enConfBlacklist').replace(unwantedRegex[0], '').replace(/^,|,$/g,'').replace(/(.),(.)/g,'$1|$2'),'i');
    enBlackTrue=!''.match(enBlack);
    
    enWhite=RegExp(GM_config.get('enConfWhitelist').replace(/^,|,$/g,'').replace(/(.),(.)/g,'$1|$2'),'i');
    enWhiteTrue=!''.match(enWhite);
    
    enBlackTemp= GM_config.get('enConfHideColder');
    EnstylerBlacklistRemove()
    EnstylerBlacklistDo();
}

function EnstylerBlacklistDo() {
    if (!GM_config.get('enConfBlackEnable') || ( !enBlackTrue && enBlackTemp < -900)) { return;}
    
    // process every article, raise vars
    var hasComments=false;
    if ($('.comments-list').length) hasComments=true

    var myDealText;
    $('article').not('.'+enClassBlackDone+', .threadWidget-item').each( function () {
        // mark as already seen
        $(this).addClass(enClassBlackDone);

        // get title, categorie, user, comment and remove unwanted chars
        myDealText = ($('.thread-category',$(this)).text()
              + ' ' +$('.thread-title a',$(this)).text()
              +' @' +$('.user',$(this)).text())
        
        // get text and quoted user from comments
        if (hasComments) {
            myDealText += ' ' +$('.comments-item .userHtml', $(this)).text()
                          + ' @' +$('.vwo-user-link', $(this)).text();
        }
        // remove unwanted chars 
        myDealText = myDealText.replace(unwantedRegex[1] ,' ');
        
        // whitelist Regex, exit if found
        if ( enWhiteTrue && myDealText.match(enWhite)) { return; }

        // vote temp & blacklist
        if (parseInt($('.vote-temp', $(this)).text()) <= enBlackTemp
            || enBlackTrue  &&  myDealText.match(enBlack)) {
                $(this).addClass(enClassHidden);
                enBlacklisted++;
                EnstylerLastSeenSkip('#'+$(this).attr(enID));
        }    
    }); // END Article 
    
    // process comments
    

    // set label for unBlacklist button
    EnstylerBlacklistShow()   
}

// blacklist support functions ....

function EnstylerBlacklistShow() {
       enJSfieldDefs.enConfUnblacklist.label=enUnblackText.replace(enPATTERN[enTEXT],enBlacklisted)
}

function EnstylerBlacklistRemove() {
       enBlacklisted=0;
       EnstylerBlacklistShow()
       $('.'+enClassHidden).removeClass(enClassHidden);
       $('.'+enClassBlackDone).removeClass(enClassBlackDone);
}  

function EnstylerBlacklistUnhide() {
       enBlacklisted=0;
       EnstylerBlacklistShow()
       $('.'+enClassHidden).removeClass(enClassHidden);
}  


// Main Nav will stay on TOP of the screen =========================
const myFixedCSS = { every:  '.enFixedNav { display: block; position: fixed; width: 100%; z-index: 120;} .subNav, .userProfile, .tabbedInterface, .splitPage-wrapper {margin-top: <ENSTYLER-TEXT-HERE>px}',
                     subnav: '.subNav {margin-top: 0 !important;} .nav-subheadline {margin-top: <ENSTYLER-TEXT-HERE>px}',
                     discus: '.tGrid.page2-center.height--all-full {margin-top: calc(<ENSTYLER-TEXT-HERE>px + 10px);} #footer .page-content { padding-top: calc(<ENSTYLER-TEXT-HERE>px + 10px);}'
                   };
function EnstylerFixedNav() {
        if (GM_config.get('enConfNavFixed')) {
            // everywhere but in Deal detail, I like it like it is ... 
            if (enSection != '/deals/' && enSection != '/gutscheine/' ){
                // delete header element with active stuff, but keep inside HTML
                var mySavedHtml = $('header').html();
                $('header').replaceWith('<header class="enFixedNav">'+mySavedHtml+'</header>');
                
                // fixed NAV for everywhere
                var myFixedStyle=myFixedCSS['every'];
                
                // additionla CSS for different sections
                if (enSection == EnstylerSiteConfig('discussion')) {  myFixedStyle+=myFixedCSS['discus']; }
                if ($('.nav-subheadline').length || enSection=='/profile/') {
                    // additional CSS for categories
                    myFixedStyle+=myFixedCSS['subnav'];                    
                }
                
                myFixedStyle= myFixedStyle.replace(enPATTERN[enTEXT], enMainHeigth)
                addStyleString(myFixedStyle)
            }
        }
}

// the return of "gestern xx:xx Uhr" ==============
var enNow=new Date();
var DealDate=new Date();
var TodayStart;
var ShowTime;
var EnstylerTimeSeen='enTimeSeen';

function EnstylerDealTime() {
         TodayStart = new Date(enNow.getFullYear(), enNow.getMonth(), enNow.getDate());
         ShowTime= GM_config.get('enConfDealMinTime')*3600*1000;
         EnstylerDealTimeDo();
}

const enTimeLang = { de: { yesterday: 'Gestern', today: 'heute', oclock: 'Uhr' },
                     en: { oclock: 'o&acute;clock' }, //field name = english label
                     nl: { yesterday: 'Gestern', today: 'heute', oclock: 'Uhr' }
                     }

function EnstylerDealTimeDo() {
  if (enSection.match(enMainSectionMatch) && GM_config.get('enConfDealTime')) {
         var myNow=Date.now();
         // process every article, optimization: not if class TiemSeen
         var myTime, myDealDiff;
         $('time').not('.'+EnstylerTimeSeen).each(function () {
            // get Deal time, 
            myTime= $(this).text();
            // next article if less than an h or older than 24h
            if ( myTime.length <8 || myTime.endsWith('e')) {return;}

            // compose  deal offset
            myDealDiff = (parseInt(myTime.replace(/.* ([0-9].*) [hu].*/, '$1'))*60+parseInt(myTime.replace(/.* ([0-9].*) m.*/, '$1')))*60000;
            if(isNaN(myDealDiff)) return;
            DealDate.setTime( myNow - myDealDiff );


            // last midnigth
            if (DealDate < TodayStart) {
                myTime='<EN-LANG:yesterday> '+ DealDate.toString().slice(16, 21) +' <EN-LANG:oclock>';
            // more than x hours ago
            } else if (myDealDiff > ShowTime){
                myTime += ' (<span class="hide--toW2"><EN-LANG:today> </span>'+ DealDate.toString().slice(16, 21)
                         +'<span class="hide--fromW3 hide--toW2"> <EN-LANG:oclock></span>)';
            } else { return; }
            $(this).html(enLangLocalize(myTime, enTimeLang, enLANG));
            $(this).addClass(EnstylerTimeSeen);
         });
  }
}

// mark last seen Deal in Highligth, Hot and New ============================
var enSec='';
var enSeenArticle='';

// GM variables used here 
// store newest loaded deal
// 'enNewestDeal...new'
// 'enNewestDeal...hot'
// 'enNewestDeal...'
// international support added
const enNewestBase='enNewest'+enInternationalSite;
var LastSeenOnce=true;

function EnstylerLastSeen(){
  // only once and in main categories
  if(LastSeenOnce) {
    LastSeenOnce=false;

    // store last seen for Main catergories
    if(enSection.match(enMainSectionMatch)) {
      // get section and save
      enSec= enNewestBase + enSection.replace(/\//, '');
      GM_setValue(enNewestBase+'LastSec', enSec)
      // get last seen article
      enSeenArticle=GM_getValue(enSec, '');

      EnstylerLastSeenDo();
      
      // save actual last seen
      if(enLocParser.search == '') $('article').not('.threadWidget-item').each(function () {
          // pinned ?
          if (!('.cept-pinned-flag',$(this)).length) {return;}

          //store actual seen
          GM_setValue(enSec, $(this).attr(enID));
          //store last seen
          GM_setValue(enSec+'Last', enSeenArticle);

          // exit loop
          return false;
      }); 
    } else {
        // if we are not in main categorie => restore last value
        EnstylerLastSeenLast()
    }
  }
}

function EnstylerLastSeenDo(){
  // only in main categories
  if(enSec != '') {
      // mark last seen article
      if (enSeenArticle != '') {
          //store last marked
          GM_setValue(enSec+'Last', enSeenArticle);
          $('#'+enSeenArticle).addClass('enClassMarkArticle');
      } else {
          // first time
          GM_setValue(enSec, 'thread_1');
      }

  }
}

// restore last seen from last last seen
function EnstylerLastSeenLast(){
      // restore last value
      enSec=GM_getValue(enNewestBase+'LastSec','');
      GM_setValue(enSec, GM_getValue(enSec+'Last',''));    
}

// article is not availible i.e. blacklisted
function EnstylerLastSeenSkip(DealID) {
    // if article last seen one, skip to next
    if (DealID == '#'+enSeenArticle) {
        // magic, get ID of next article
        enSeenArticle=$(DealID).next().attr(enID);
        EnstylerLastSeenDo(); 
    }
}


// check and get Updates of Enstyler2 CSS ================================

const enUpdateUrl = 'https://userstyles.org/styles/128262/enstyler2-style-your-mydealz.css'; // production version

function enCheckUpdates() {
  // if FF and enabled
  if (isMozilla && GM_config.get('enConfInjectCSS')) {
    // get time and convert to minutes
    var myDiff= (Date.now()/60000|0) - GM_getValue('enLastUpdateCheck','0');
      
    // if option set and time expired
    if(DEBUG) console.error('Update requested, minutes '+enUpdateInterval+' diff '+myDiff); 
    if (isNaN(myDiff) || myDiff > enUpdateInterval ) {
        // store actual time
        if(DEBUG) console.error('Update started');
        enUpdateCSS();
     }
  }
}

function enUpdateCSS() {
    var myTime=Date.now()/60000|0 ;
    enCacheExternalResource( enUpdateUrl + enComposeUpdateOpt(), 'Enstyler2_CSS');
    GM_setValue('enLastUpdateCheck', myTime);
}

const enCssOpt='EnstylerCssOpt'

function enComposeUpdateOpt() {
    // get saved options, remove newlines and split to settings array
    var myOptions=GM_getValue(enCssOpt, '');

    // abort if no options found
    if (myOptions=='' || !myOptions.startsWith('#')) {return "";}

    myOptions=myOptions.replace(/\n/g,'');
    var mySettings = myOptions.split(';');

    // start composing options
    myOptions='';
    for (var i=0; i< mySettings.length; i++) {
           //if(DEBUG) console.error('process:' + mySettings[i]);
           if(mySettings[i]=='') continue;
        
           // each Setting has 3 fields seperated by :
           var myField=mySettings[i].split(':');
           // add &setting=value
           myOptions += '&' +myField[1].slice(0, -1) + '=' + myField[1];
        }
    
     // replace first & by ? and returns string
     myOptions = '?'+myOptions.slice(1);
    
if (DEBUG) alert(myOptions);
     if(DEBUG) console.log(myOptions);
     return myOptions;
} 

// compose Nav Menu items  =======================================
// i.e. create button for display Config ======================
// define pattern actions here, incl. international support
// Main sections, no deal or details
  const enMainSectionMatch=/^\/$|^\/hot$|^\/new$|^\/settings$|^\/discussed$|^\/hei%C3%9F$|^\/diskutiert$/;

  const enHREF='href', enID='id', enTEXT='text'
  const enPATTERN =  { href: /<ENSTYLER-HREF-HERE>/g,     // pattern to insert link ...
                       id:   /<ENSTYLER-THREADID-HERE>/g, // pattern to insert ID
                       text: /<ENSTYLER-TEXT-HERE>/g,     // pattern to insert Text
                      };

  const enNavEntry='enNavEntry';
  const enMenuItemCode = { Main: '<a class="enNavEntry navMenu-link" id="<ENSTYLER-THREADID-HERE>" href="<ENSTYLER-HREF-HERE>" data-handler="track" data-track="{&quot;action&quot;:&quot;goto_main_target&quot;,&quot;beacon&quot;:true}"><span class="navMenu-link-ico ico ico--type-discussion-navMenuLayerItem navMenu-ico--selected--type-discussion navMenu-ico--hover--type-discussion"></span><ENSTYLER-TEXT-HERE></a>',
                           Sub:  '<li class="enNavEntry subNavMenu-item--separator test-tablink-discussed"><a  href="<ENSTYLER-HREF-HERE>" class="subNavMenu-item subNavMenu-link space--h-4 vAlign--all-m" id="<ENSTYLER-THREADID-HERE>" data-handler="track" data-track="{&quot;action&quot;:&quot;goto_menu_target sort&quot;,&quot;label&quot;:&quot;diskutiert&quot;,&quot;beacon&quot;:true}"><span class="box--all-i size--all-xl vAlign--all-m"><ENSTYLER-TEXT-HERE></span><span class="js-vue-container--threadcount" data-handler="vue" data-vue="{&quot;count&quot;:null}"></span></a></li>',
                    MainButton: '<a class="enNavEntry navMenu-link" id="<ENSTYLER-THREADID-HERE>"><span class="navMenu-link-ico ico  ico--type-discussion-navMenuLayerText"></span><ENSTYLER-TEXT-HERE></a>',
                     SubButton:  '<li class="enNavEntry subNavMenu-item--separator test-tablink-discussed"><a  class="subNavMenu-item subNavMenu-link space--h-4 vAlign--all-m" id="<ENSTYLER-THREADID-HERE>"><span class="box--all-i size--all-xl vAlign--all-m"><ENSTYLER-TEXT-HERE></span></a></li>'
                         };
  //const const enMenuSub=1; const enMenuSubButton=3;
  const enMenuItemLength= enMenuItemCode.length;

  // Enstyler Button
  const EnstylerButton = 'EnstylerButton';

const enMenuLang = { de: { discussion: 'Alle Diskussionen',
                             enstyler: 'Enstyler Homepage', enhref: 'https://www.mydealz.de/diskussion/enstyler-856062',
                             settings: 'Enstyler Einstellungen' },
                    
                     en: { discussion: 'All discussions', 
                             enstyler: 'Enstyler Homepage', enhref: 'https://greasyfork.org/de/scripts/24243-enstylerjs',
                             settings: 'Enstyler Settings' },
                     nl: { discussion: 'All discussions', 
                             enstyler: 'Enstyler Homepage', enhref: 'https://greasyfork.org/de/scripts/24243-enstylerjs',
                             settings: 'Enstyler Settings' }   
                   }

const enSiteConfig= { Mydealz: { discussion: '/diskussion/', page: 'Seite '},
                  Preisjaeger: { discussion: '/diskussion/', page: 'Seite '},
                           Nl: { discussion: '/discussies/', page: 'Pagina '}
                       }

function EnstylerSiteConfig(key) { return enLangLocalize('<EN-LANG:' + key + '>', enSiteConfig, enInternationalName); }

// compose default Enstyler Menu
function EnstylerMenuActions(){
    EnstylerNavRemove()
    if (!enInternational) {
            // MyDealz only: alle Diskussionen 
            EnstylerAddNav('Main','<EN-LANG:discussion>', EnstylerSiteConfig('discussion'),'enMainDiscussion')
    }
    // add Enstyler Homepage
    EnstylerAddNav('Main', '<EN-LANG:enstyler>', '<EN-LANG:enhref>" target="_blank','enMainHomepage', 'building');
    // add EnstylerJS config
    EnstylerAddNav('MainButton', '<EN-LANG:settings>', showEnstylerConfig, EnstylerButton, 'page');
    
    // add to Sub Nav
    //EnstylerAddNav(enMenuSubButton, '<EN-LANG:settings>' , showEnstylerConfig, EnstylerButton)
}


// add to Nav ======================
// nav = menu action
// text = menu text
// target = URL to show, in case of Button function to call
// Icon can be home, tag, scissors, free, discussion (default), building, star, snowflake, page (button), star (button)
var enNavIconPat='--type-discussion';

function EnstylerAddNav(nav,text,target,ID, Icon) {
    if (typeof Icon === 'undefined' || Icon == '') Icon=enNavIconPat;
    var isFunc=false;
    
    // compose menu entry
    var myEntry = enMenuItemCode[nav].replace(enPATTERN[enID],ID).replace(enPATTERN[enTEXT],text);
    if(Icon !=enNavIconPat) { myEntry = myEntry.split(enNavIconPat).join('--type-'+Icon)}
    
    // target can be a function
    if (typeof target === "function") { isFunc=true;
    } else {
        myEntry = myEntry.replace(enPATTERN[enHREF],target);
    }
 
    if (nav[0]== 'M') { // Main Menu
            // first Main menu entry, start listen to klick
            if(enAddMain == '')  { $('.nav-link.navMenu-trigger').click(debounce( 300, EnstylerMainDo)); }
            enAddMain += myEntry;
            if (isFunc) { enAddMainFunc[enAddMainCount++]= { ID: ID , target: target}; }
    }
/*  else {
            // ad to Subnav, click if visible
            $('.subNavMenu-list').append(myEntry);
            if(isFunc) { $('#'+ID).click(target); }
            
            // handler if dropdown, start listen to klick
            if(enAddSub == '')  { $('.subNavMenu-trigger').click(debounce( 300, EnstylerSubDo)); enAddSub='done'; }         
            if(isFunc) { enAddSubFunc[enAddSubCount++]= { ID: ID , target: target}; }
    }
/**/
     
}

// Show items in Sub / Main Menu ===== 
// store ID and function to call on click
var enAddMain='';
var enAddMainFunc= [ ];
var enAddMainCount=0;

function EnstylerMainDo() {
      //add items
      $('.popover-content nav .navMenu-div').first().before(enLangLocalize(enAddMain, enMenuLang, enLANG));

      // create space for new entrys
      var myMenu=$('.popover--mainNav');
      // +35px per new items
      var myHeigth= 35*(enAddMain.split(enNavEntry).length -1) + parseInt(myMenu.attr('style').split('height: ')[1]);
      myMenu.attr('style',myMenu.attr('style').replace(/height: [0-9.]*px/,'height: '+myHeigth+'px'));
          
      // add button callbacks
      for (var i=0; i<enAddMainCount; i++ ) {
          $('section #' + enAddMainFunc[i].ID).click(enAddMainFunc[i].target);
      }
}

/*
var enAddSub='';
var enAddSubFunc= [ ];
var enAddSubCount=0;

function EnstylerSubDo() {
      // klick event handler, call with debounce( 300) to wait until menu is created and avoid double klicks
      //add items
      if(DEBUG) console.error('Add Menu Items to Sub ...')
      for (var i=0; i<enAddSubCount; i++ ) {
          $('section #' + enAddSubFunc[i].ID).click(enAddSubFunc[i].target);
      }
}
/**/

function EnstylerNavRemove() {
       // Clear Menu Items stored
       enAddMain='';
       enAddMainFunc= [ ];
       enAddMainCount=0;
       $('.navMenu-page').unbind('click');
    
       // remove visible items
       $('.'+enNavEntry).remove();

}  

// ============= GM_config functions =======================================
const enJSAutoUpdate=GM_info.scriptWillUpdate;
var enUpdateWindow;

const enConfigLang = {
   de: { 
       headline: 'Enstyler - Einstellungen',
       features: 'Erweiterte Funktionen f&uuml;r Enstyler',
      configcss: 'CSS Optionen',
     userscript: 'Update Enstyler',
        cookies: 'No Cookies',
      injectcss: 'CSS ohne Stylish laden',
         config: 'Konfiguration',
       navfixed: 'feste Haupnavigation',
      userpopup: 'Popuop f&uuml;r Userinfo', 
          touch: 'Touch Support aktivieren', 
         amazon: 'Amazon mobile redirect', 
     dealaction: 'zus&auml;tzliche Deal Aktionen', 
         picker: 'Zeige Page Picker', 
       dealtime: 'Zeige echte Deal Zeit', 
        mintime: 'wenn &auml;lter als x Stunden',
        fixhtml: 'fix Deal Text HTML',
      blacklist: 'Aktiviere Black- / Whitelist', 
      blackcold: 'Blacklist wenn k&auml;lter als', 
          black: 'Blacklist - Dealz, Kategorie, @Benutzer, Kommentare', 
          white: 'Whitelist', 
        unblack: 'Entferne von Blacklist:',
           lang: 'Enstyler Sprache w&auml;hlen',
           save: 'Speichern',
          close: 'Schlie&szlig;en',
       // Enstler CSS Config
        savecss: 'Deine ausgewählten CSS Optionen',
       howtocss: 'Zum Beibehalten der CSS Optionen "<EN-LANG:save>" klicken ',
        options: 'Optionen speichern',
     optnotsave: 'Klicken zum Speichern der Optionen!'
       },
   en: {
       headline: 'Enstyler - Settings',
       features: 'additonal features for Enstyler',
      configcss: 'CSS Options',
     userscript: 'Update Enstyler',
        cookies: 'No Cookies',
      injectcss: 'Inject CSS without Stylish',
         config: 'Configuration',
       navfixed: 'Display FIXED MainNav', 
      userpopup: 'Show Popuop Userinfo', 
          touch: 'Enable Touch Support', 
         amazon: 'Amazon mobile redirect', 
     dealaction: 'additional Deal actions', 
         picker: 'Enable Page Picker', 
       dealtime: 'Show real Deal Time', 
        mintime: 'if older than Hours',
        fixhtml: 'fix Deal Text HTML',
      blacklist: 'Enable Black- / Whitelist', 
      blackcold: 'Blacklist if colder then', 
          black: 'Blacklist - dealz, categories, @users, comments', 
          white: 'Whitelist', 
        unblack: 'Remove from blacklist:',
           lang: 'Select Enstyler Language',
           save: 'Save',
          close: 'Close',
       // Enstler CSS Config
        savecss: 'Your selected CSS options',
       howtocss: 'To store your CSS options klick "<EN-LANG:save>" ',
        options: 'Save options',
     optnotsave: 'Klick to save Options!'
     },
   nl: {
       headline: 'Enstyler - Settings',
       features: 'additonal features for Enstyler',
      configcss: 'CSS Options',
     userscript: 'Update Enstyler',
        cookies: 'No Cookies',
      injectcss: 'Inject CSS without Stylish',
         config: 'Configuration',
       navfixed: 'Display FIXED MainNav', 
      userpopup: 'Show Popuop Userinfo', 
          touch: 'Enable Touch Support', 
         amazon: 'Amazon mobile redirect', 
     dealaction: 'additional Deal actions', 
         picker: 'Enable Page Picker', 
       dealtime: 'Show real Deal Time', 
        mintime: 'if older than Hours',
        fixhtml: 'fix Deal Text HTML',
      blacklist: 'Enable Black- / Whitelist', 
      blackcold: 'Blacklist if colder then', 
          black: 'Blacklist - dealz, categories, @users, comments', 
          white: 'Whitelist', 
        unblack: 'Remove from blacklist:',
           lang: 'Select Enstyler Language',
           save: 'Save',
          close: 'Close',
       // Enstler CSS Config
        savecss: 'Your selected CSS options',
       howtocss: 'To store your CSS options klick "<EN-LANG:save>" ',
        options: 'Save options',
     optnotsave: 'Klick to save Options!'
     }
                     }
const enUnblackText = confLang('unblack') +' <ENSTYLER-TEXT-HERE> Dealz';

function confLang(key) { return enLangLocalize('<EN-LANG:' + key + '>', enConfigLang, enLANG); }
function getLanguages() { return ['auto', 'de', 'en', 'nl'];}

// define EnstylerJS GM_config elements
const enJSfieldDefs = {
    // Part one: load external content --------
   'enstylerCSS': { 
      'section': [confLang('features'), ''],
      'label': confLang('configcss'), // Appears on the button
      'type': 'button', // Makes this setting a button input
      'click': function() { // Function to call when button is clicked
               enUpdateWindow=window.open('https://userstyles.org/styles/128262#style-info',
                           'UserCSS', 'width=600,height=950,left=0,top=0');
               GM_setValue('enLastUpdateCheck', 0)
               }
    },
    'enstylerJS': { 
      'label': confLang('userscript'), // Appears on the button
      'type': 'button', // Makes this setting a button input
      'click': function() { // Function to call when button is clicked
               enUpdateWindow=window.open(!DEBUG ? 'https://greasyfork.org/scripts/24243-enstylerjs/code/EnstylerJS.user.js' :
                                          ' https://greasyfork.org/scripts/24244-enstylerjs-develop/code/EnstylerJS Develop.user.js',
                                          'UserScript', 'width=110,height=110,left=0,top=0');
               // give 5s to start update, then close
               sleepAsync(5000).then(function() { enUpdateWindow.close(); });

               }
    },

   'dontCookies': {
      'label': confLang('cookies'), // Appears on the button
      'type': 'button', // Makes this setting a button input
      'click': function() { // Function to call when button is clicked
               window.open('https://addons.mozilla.org/firefox/addon/self-destructing-cookies/'); }
    },
    // Inject CSS directly
    'enConfInjectCSS': {
      'label': confLang('injectcss'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },

   // part two: EnstylerJS internal configuration options ------ 
   'Section': { // display next section, dont kow why ...
      'section': [confLang('config'), ''],
        'type': 'hidden', // Makes this setting a hidden input
   },
    
   'enConfNavFixed': {
      'label': confLang('navfixed'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },
   // more Deal actions
   'enConfDealAction': {
      'label': confLang('dealaction'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },    
   // enebale popup for Avatar
   'enConfPopup': {
      'label': confLang('userpopup'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },
    // enable Touch support (bigger Avatar, touch on Deal Image)
   'enConfTouch': {
      'label': confLang('touch'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': false // Default value if user doesn't change it
    },   
    
  // enable filtering of external links
  'enConfAmazonRedirect': { 
      'label': confLang('amazon'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    }, // */
  

   // Page picker
   'enConfPagePicker': {
      'label': confLang('picker'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },

    // show real Dealtime 
   'enConfDealTime': {
      'label': confLang('dealtime'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },
    'enConfDealMinTime': {
      'label': confLang('mintime'), // Appears next to field
      'type': 'int', // Makes this setting a text input
      'min': 1, // Optional lower range limit
      'max': 24, // Optional upper range limit
      'size': 4, // Limit length of input (default is 25)
      'default': 6 // Default value if user doesn't change it
   },
    
   // fix bad userhmtl (cut'n paste crap)
   'enConfFixHtml': {
      'label': confLang('fixhtml'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },
    
    // Black/Whitelist input
   'enConfBlackEnable': {
      'label': confLang('blacklist'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    },
   'enConfHideColder': {
      'label': confLang('blackcold'), // Appears next to field
      'type': 'int', // Makes this setting a text input
      'min': -9999, // Optional lower range limit
      'max': -9, // Optional upper range limit
      'size': 4, // Limit length of input (default is 25)
      'default': -999 // Default value if user doesn't change it
   },
    'enConfBlacklist': {
      'label': confLang('black'), // Appears next to field
      'type': 'text', // Makes this setting a text input
      'size': 70, // Limit length of input (default is 25)
      'default': 'G.steklo, Bangood, @Admin' // Default value if user doesn't change it
    },
    'enConfWhitelist': {
      'label': confLang('white'), // Appears next to field
      'type': 'text', // Makes this setting a text input
      'size': 70, // Limit length of input (default is 25)
      'default': '' // Default value if user doesn't change it
    },
    'enConfUnblacklist': {
      'label': confLang('unblack'), // Appears on the button
      'type': 'button', // Makes this setting a button input
      'click': function() { // Function to call when button is clicked
               EnstylerBlacklistUnhide(); }
    },
    'enConfLang':
    {
      'label': confLang('lang'), // Appears next to field
      'type': 'select', // Makes this setting a dropdown
      'options': getLanguages(), // Possible choices
      'default': ''
    },
   
   // used to not destroy saved Enstyler2 Options
  'saveOpt': { 
      'type': 'hidden', // Makes this setting a button input
    },


};

// define EnstylerJS GM_config elements
const enHomefieldDefs = {
    // Part one: load external content --------
    'saveOpt': { 
      'section': [ confLang('savecss'), ''],
      'label': confLang('howtocss'), // Appears near textarea
      'type': 'textarea', // Makes this setting a button input
      'size': 70,
    },    
    // Inject CSS directly
    'enConfInjectCSS': {
      'label': confLang('injectcss'), // Appears next to field
      'type': 'checkbox', // Makes this setting a checkbox input
      'default': true // Default value if user doesn't change it
    } ,
    'enConfLang':
    {
      //'label': confLang('lang'), // Appears next to field
      'type': 'hidden', // Makes this setting a dropdown
      'options': getLanguages(), // Possible choices
      'default': ''
    }
};

// display GM_config as div, so we can apply CSS easy!! ======================
const enGMFrame = document.createElement('div');
enGMFrame.setAttribute('class','GM_config');

// EnstylerJS Config Panel anzeigen =====================
var enGMConfigOpen=false;

function showEnstylerConfig () {
  if(!enGMConfigOpen) {
      GM_config.open();
      // hide menu
      $('.popover--mainNav').remove();
      enGMConfigOpen=true;
  } else {
      GM_config.close();
  }    
}

function showEnstylerCSS () {
      enGetHome();
      GM_config.open();
}


const enRemoveConfig = [
           { check: false, switch: 'enConfDealTime',    remove: 'enConfDealMinTime'},
           { check: false, switch: 'enConfBlackEnable', remove: 'enConfWhitelist'},
           { check: false, switch: 'enConfBlackEnable', remove: 'enConfBlacklist'},
           { check: false, switch: 'enConfBlackEnable', remove: 'enConfHideColder'},
           { check: false, switch: 'enConfBlackEnable', remove: 'enConfUnblacklist'}
         ];

function confLangOpen() {
    GM_config.set('enConfLang', GM_getValue('enLang',''));
    // set save and close strings
    $('.GM_config button[id$="_saveBtn"]').html(enConfigLang[enLANG].save);
    $('.GM_config button[id$="_closeBtn"]').html(enConfigLang[enLANG].close);
}

// GM_Config Init for MyDealz and Enstyler Home
if (!window.location.hostname.endsWith('userstyles.org')) {
    var enFixedNavLast=false;
    GM_config.init(
      {
                       //  international sites support
        id: enInternational ? 'GM_config' + enInternationalSite : 'GM_config',
        title: !DEBUG ? confLang('headline') : confLang('headline') + ' >> Debug <<', 
        fields: enJSfieldDefs,
       'events': // Callback functions object
         {
          //'init': function() { alert('onInit()'); },
          // remove elements ich switch is checked or not
          'open': function() { 
             enFixedNavLast=GM_config.get('enConfNavFixed');
             // init lang on open
             confLangOpen()
             
              // remove unneeded controls
             $(enRemoveConfig).each(function() {
                 if (GM_config.get(this.switch) == this.check) {
                  GM_config.fields[this.remove].remove();
                 }
             });
              
             // remove / display update dialog
             if (enJSAutoUpdate) {GM_config.fields['enstylerJS'].remove();}
             if (!isMozilla)     {GM_config.fields['dontCookies'].remove();
                                  GM_config.fields['enConfInjectCSS'].remove();}
              
          },
          //'reset': function() { alert('reset') },
          // relaod page on close after save
          'save':  function() {
              // save lang selection or '' if auto
              GM_config.get('enConfLang') == 'auto' ? GM_setValue('enLang', '') : GM_setValue('enLang', GM_config.get('enConfLang'))
              // disable FixedNav can only done with reload
              if (!GM_config.get('enConfNavFixed') && GM_config.get('enConfNavFixed')!=enFixedNavLast) {window.location.reload(false);}

              // restart Enstyler magic
              GM_config.close();
              enCheckUpdates();
              EnstylerStart();
              EnstylerMenuActions();
              EnstylerPagePickerCreate();
              // show changes in config after processing magic
              GM_config.open();
            },
         'close': function() { enGMConfigOpen=false;},
         },
       'frame': enGMFrame // Element used for the panel
      }
    );

} else {
    // activate config for Enstyler Homepage
    GM_config.init(
      {
        id: 'GM_config',
        title: !DEBUG ? confLang('headline') + ' CSS' : confLang('headline') + ' >> Debug <<',  
        fields: enHomefieldDefs,
       'events': // Callback functions object
         {
          'open':  function() { confLangOpen(); if (!isMozilla) {GM_config.fields['enConfInjectCSS'].remove();}  },
          'save':  function() { enSetHome(); enUpdateCSS(); EnstylerHomeButton(); GM_config.close(); },
          'close': function() { enGMConfigOpen=false; },
         },
       'frame': enGMFrame // Element used for the panel
      }
    );

}
    
// AMAZON mobile redirect ===========================================
// workaround to not intercept myDealz redirects with GM_xmlhttp
// stolen from amazon redirect mobile: https://greasyfork.org/de/scripts/19700
function enAmazonMobileRedirect() {
  var enMyLocation=enLocParser.toString();
  // do we run on amazon?
  if (enMyLocation.startsWith("https://www.amazon")) {
    // redirect enabled?  
    if (GM_config.get('enConfAmazonRedirect')) {
      // do it
      if (enMyLocation.includes("/gp/aw/d/")) { window.location.assign(enMyLocation.replace("/gp/aw/d/", "/dp/")) }
      else { window.location.assign(enMyLocation.replace("/gp/aw/ol/", "/gp/offer-listing/")); }
    }
    // Amazon but no redirect enabled
    return false;
  } 
return true;
}


// basic config panel formatting, everything else is formatted by enstyler
var enCSS = ['.threadWidget-footer::after {display: none !important};', // remove Enstyler2 (c) message
             '.GM_config {left: 5% !iportant; top: 8% !important; height: auto !important; max-width: 35em !important; background-color: white;}',
             '.GM_config input, .GM_config button, .GM_config textarea { border: 1px solid; margin: 0.5em 0em 0.2em 1em; padding: 0.1em;}',
             '.GM_config .reset { font-size: 9pt; padding-right: 1em; }',
             '.enClassHidden, #EnPopup_closeBtn {display: none;}',
            ].join(" ");


// get colors of page to integrate better in international pages
// and save hight of navigation ...
var enMainHeigth;


//=============== startup helper functions ==========================================
// Start Enstyler Magic
function EnstylerStart() {
        EnstylerFixedNav();
        if(DEBUG) { var t0 = Date.now(), t1; }
        EnstylerLastSeen();
        if(DEBUG) {t1 =Date.now();
                         console.error("Call lastseen took ms  : " + (t1 - t0) );
                        t0 = Date.now();}
        EnstylerDealTime();
        if(DEBUG) {t1 = Date.now();
                         console.error("Call dealtime took ms  : " + (t1 - t0) );
                        t0 = Date.now(); }
        EnstylerBlacklist();
        if(DEBUG) {t1 =Date.now();
                         console.error("Call blacklist took ms : " + (t1 - t0) );
                         t0 = Date.now();}
        EnstylerDealActions();
        if(DEBUG) {t1 = Date.now();
                         console.error("Call dealaction took ms: " + (t1 - t0) );
                         }
    }

// delayed actions after finishing everything else
function EnstylerDelayedInit() {
           // don't know why, but works only if called with delay ...
           EnstylerMenuActions();
           EnstylerPagePickerCreate();
        
          // track DOM change Events, debounce: wait 1000ms after mutiple events
          // then re-apply (somse) changes to dynamic loaded content, 
         // $('.cept-event-deals, .thread-list--type-card').bind("DOMSubtreeModified",$.debounce( 400, function(){
         $('.js-pagi-bottom').bind("DOMSubtreeModified", debounce( 100, function(){
              if(DEBUG) {var ts=Date.now(), t0 = Date.now(), t1;}
              EnstylerLastSeenDo();
              EnstylerPagePickerDo();
              if(DEBUG) {t1 = Date.now();
                         console.error("Call lastseen took ms  : " + (t1 - t0) );
                        t0 =Date.now();}
              EnstylerDealTimeDo();
             if(DEBUG) {t1 = Date.now();
                         console.error("Call dealtime took ms  : " + (t1 - t0) );
                        t0 = Date.now(); }
              EnstylerBlacklistDo();
              if(DEBUG) {t1 = Date.now();
                         console.error("Call blacklist took ms : " + (t1 - t0) );
                        t0 = Date.now(); }
              EnstylerDealActionsDo();
              if(DEBUG) {t1 = Date.now();
                         console.error("Call dealaction took ms: " + (t1 - t0) );
                        }
              if(DEBUG) console.error('DOMSubtreeModified took ms: '+ (t1 - ts));
             
          }));
    }

//=============== Main functions START @ DOM READY ==========================================
// normally scriptmis started at DOM ready, we try early as possible after document start
// HACK: wait for BASIC DOM is availible, then run
WaitForBody(); 

function WaitForBody () {
    // wait for footer
    if (!$('footer').length) { 
       setTimeout(WaitForBody, 200); // give everything some time to render
    } else {
       MAIN();
    }
}

function MAIN() {        
  // MAIN          
  // HERE WE GO!
  if(DEBUG) enInitTime = performance.now() - enInitTime;
  if(DEBUG) console.error('Inittime: ' + enInitTime + ' ms');

  // add frame and style to body 
  document.body.appendChild(enGMFrame);

  // script time mesurement starts here
  const EnstylerStartTime=Date.now();

  // if pepper site, do some initial pepper stuff
  if ($('.nav').length){
    // inject userstyle directly. no more userstyle needed!
    if (GM_config.get('enConfInjectCSS')) addStyleString(GM_getValue('Enstyler2_CSS',''), 'domain("' + enLocParser.hostname);
    enCheckUpdates();
 
    // calc colors and topx, give some time to apply injected CSS
    // enMainHeigth = parseInt($('header').outerHeight()); //jquery
    // workaround for zepto (no .outerHeigth())
    enMainHeigth = getOuterHeight('header');
      
    sleepAsync(1000).then(function() {
           var myBgColor=$('.nav').css('background-color');
           var myButtonColor=$('.btn--mode-special').first().css('background-color');
           addStyleString(' .GM_config {background-color: '+ shadeRGBColor(myBgColor, -0.30) + ' !important; color: '+ shadeRGBColor(myBgColor, 0.50)
               + '; top: '+ enMainHeigth +'px !important;}' 
               + ' .nav-link-text:hover, .js-navDropDown-messages:hover, .js-navDropDown-activities:hover  { background-color: ' +shadeRGBColor(myBgColor, 0.11)+ ' !important;}'
               + ' .GM_config input[type=button] { background-color: ' + myButtonColor + ' !important; border-color: ' + myButtonColor + ' !important; min-width: 10em;}'
               + ' .GM_config input[type=button]:hover, .btn--mode-special:hover { background-color: ' + shadeRGBColor(myButtonColor, 0.30) + ' !important; border-color: ' + shadeRGBColor(myButtonColor, 0.30) + ' !important;}'
               )
           });
  } 
    
  // add predefined styles
  addStyleString(enCSS);


  // EnstylerJS START ============================================

  if (enInternationalSite != 'userstyles.org') {
   // Enstyler internal Startup functions ======================
   // HACK: we are NOT on Amazon
   if (enAmazonMobileRedirect()) {
    
    // =============== MAIN: START EnstyerJS ===================
    EnstylerInit();
    EnstylerStart();
    EnstylerStartupDelay=Date.now()-EnstylerStartTime;
    if(DEBUG) console.error('Startup in ms: ' +EnstylerStartupDelay)
     
    // wait until page is loaded completely
    if (document.readyState == 'loading' || document.readyState == 'interactive'){  // Greasemonkey and Tampermonky -> runs script on DOM ready -> wait for load
        $(window).bind("load", function() { EnstylerDelayedInit(); });
    } 
    else { // if script run on page loaded -> give some time to finish rendering
         sleepAsync(EnstylerStartupDelay).then(function() { EnstylerDelayedInit(); });
    }
   } // END EnstylerJS 



  } else {
    // ============== MAIN2: we are on USERSTYLE ===================
    if (DEBUG) console.error('On Userstyle ...')
    // inject userstyle directly (experimental)
    if (GM_config.get('enConfInjectCSS')) addStyleString(GM_getValue('Enstyler2_CSS',''), 'url(https://userstyles.org');
      
    // START Enstyler 2 Homepage
    EnstylerHomeButton();
    // set saved options
    enSetHome();
    // if FF and enabled
    if (isMozilla && GM_config.get('enConfInjectCSS')) addStyleString('.install-status { display: none; }'); 

  }

} // END MAIN

// ============= EnStyler UserScript Homepage functions =======
// support for EnStyler2 export / import 
var input = document.createElement('input');
    input.type = 'button';
    input.setAttribute(enID, EnstylerButton);
    input.onclick = showEnstylerCSS;
    input.value = confLang('options');

function EnstylerHomeButton() {
        $('#'+EnstylerButton).remove()

        input.setAttribute('style', 'font-size: 1.1em; padding: 0.8em;');  
        $('#style-settings').after(input);
    }

function enGetHome() {
        var myOptions='', myID, myValue, myText;
        $('#style-settings select').each(function() {
            myID = $(this).attr(enID);
            myValue = $(this).val();
            myText  = $('option[value='+ myValue +']').text();     
            myOptions +='#' + myID + ':' + myValue +':' + myText +';\n';
        });
        $('#style-settings input:checked').each(function() {
            myID = $(this).attr(enID);
            myValue = $(this).val();
            myText  = $('label[for='+ myID +']').text();     
            myOptions +='#' + myID + ':' + myValue +':' + myText +';\n';
        });
       GM_config.set('saveOpt', myOptions);
    }
    
function enSetHome() {
        input.value = confLang('options');
        // get saved options,remove newlines and split to settings array
        var myOptions=GM_config.get('saveOpt');
        GM_setValue(enCssOpt, myOptions);
    
        // if(DEBUG) console.error('Saved Options: ' + myOptions);
        myOptions=myOptions.replace(/\n/g,'');
        var mySettings = myOptions.split(';');

        // abort if no options found
        if (myOptions=='' || !myOptions.startsWith('#')) {return;}

        for (var i=0; i< mySettings.length; i++) {
           //if(DEBUG) console.error('process:' + mySettings[i]);
           // each Setting has 3 fields seperated by :, but only 2 used
           var myField=mySettings[i].split(':');

           if (myField[0].match(/^#setting/i)) {
                // select 
                $(myField[0]).val('');
                $(myField[0]).val(myField[1]);
            } else if (myField[0].startsWith('#option')) {
                // option
                $(myField[0]).prop('checked', true);
            } else {
                if (myField[0] != '') {alert('unkown option: "' + myField +'"');}
            }
        }
        // if FF and inject enabled
        if (isMozilla && GM_config.get('enConfInjectCSS')) { 
           addStyleString('.install-status { display: none; }');
        } else {
           addStyleString('.install-status { display: inline; }');           
        } 
        // update shown otions
        HideShowLogoSelect();
        HideShowEnstyler();
    } 
    
    // close Window after Click on Update
function closeOnClick () {
       sleepAsync(10000).then(function() { window.close(); });
    }
    $(".install").click(closeOnClick);

    // show if options not saved
function showNotSaved() {
        input.value = confLang(optnotsave);
        EnstylerHomeButton();
    }
    $("#style-settings").click(showNotSaved);
    
function ShowHideItem(selectID, hideVal, jqSelektor, text) {
     // emulate :contains, because not avail in zepto
     $('#style-settings '+jqSelektor).each(function() {
          if($(this).text().indexOf(text) == -1) return;
         
          // show hide element
          if ($(selectID).val() == hideVal) {
              $(this).parent().addClass(enClassHidden);
          } else {
              $(this).parent().removeClass(enClassHidden);
          }
      });
    }
        
    // remove / display logo selection
function HideShowLogoSelect() { ShowHideItem('#setting-455195', 'ik-logo1', 'label', 'MyDealz Logo' ); }
    $('#setting-455195').change(HideShowLogoSelect);
    
    // remove / display enstyler options 
function HideShowEnstyler() { ShowHideItem('#setting-451668', 'ik-compact1', 'label', '|---' ); }
    $('#setting-451668').change(HideShowEnstyler);
        
//=========== Support functions for actual use ======


// translate/replace text by strings given in object trans[lang]
// assoc object: trans{ lang: { field: 'string', ... }, lang2: { field: 'string2', ... } }
function enLangLocalize(text, trans, lang) {
    // iterate over trans replace by idea from
    // http://stackoverflow.com/questions/7192436/
    text=text.replace(enLangPat,
                  function(match,key){
                    // if key exist return translation, else key
                    return (trans.hasOwnProperty(lang) && trans[lang].hasOwnProperty(key)) ? trans[lang][key] : key;
                  });
    // repeat until no more match for enLangPat
    return text.match(enLangPat) ? enLangLocalize(text, trans, lang) : text
}


    
// add CSS in to document
// new: remove moz-document rules
const enUserScript = { detect: /.*?@-moz-document .*?\{\s*/,
                       split:  /^.*?\{/,
                       next:   /}\s*@-moz-document.*/,
                       //repeat: /}\s*@-moz-document.*?{/g,
                       //end:    /}\s*$/
                        }

function addStyleString(str, part) {
    if (typeof part === 'undefined') part='';
    // check if userscript and extract part
    if (str.match(enUserScript['detect'])) {
       // if part is given extract only part else extract for actual site
       if (part=='') { part= enLocParser.hostname; }
       
       //split userstyle in parts
       var myPart = str.split(part); 
       str='';
       
       // extract parts
       for (var i=1; i< myPart.length; i++) {
           // skip parts with no CSS
           if (!myPart[i].includes('{')) continue;
           str += myPart[i].replace(enUserScript['split'],'').replace(enUserScript['next'],'');
       }
       //if (DEBUG) console.log(str);

    }

    var node = document.createElement('style');
    node.innerHTML = str;
    document.body.appendChild(node);
}

function capitalizeFirstLetter(string) {
    return string[0].toUpperCase() + string.slice(1);
}

// truncate String add word boundary
function truncStringWord(string, n, worddelim ){
    if (typeof worddelim === 'undefined') worddelim=' ';
    if (string.length > n) {
       string = string.substr(0,n-1);
       return string.substr(0,string.lastIndexOf(worddelim)) + '...';
    }
    return string;

};

// sleep time expects milliseconds, then execute code
// Note: works in more cases because of promise
// NOTE: code runs in parallel (asnyc)!
//     sleepAsync(500).then(function() {
//               Do something after the sleep!
//      });

// use e as time, hack for minimizer
function sleepAsync(e) {
   return new Promise((resolve) => setTimeout(resolve, e));
}

// make colors ligther or darker
// http://stackoverflow.com/questions/5560248
//color = "rbg(63,131,163)";
//lighterColor = shadeRGBColor(color, 0.5);  //  rgb(159,193,209)
//darkerColor = shadeRGBColor(color, -0.25); //  rgb(47,98,122)

function shadeRGBColor(color, percent) {
    var f=color.split(","),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=parseInt(f[0].slice(4)),G=parseInt(f[1]),B=parseInt(f[2]);
    return "rgb("+(Math.round((t-R)*p)+R)+","+(Math.round((t-G)*p)+G)+","+(Math.round((t-B)*p)+B)+")";
}


// Ensytler debounce Funtionen, modified: parameter swapped, no args passed
// can also be used as simple sleep async
// example debounce: $('input.username').click(debounce(250, function));
// example sleep async: debounce(500, function)
// https://remysharp.com/2010/07/21/throttling-function-calls
function debounce(delay, fn) {
  var timer = null;
  return function () {
    clearTimeout(timer);
    timer = setTimeout(function () {
      fn.call(this);
    }, delay);
  };
}

/* get external file and store to GM_variable */
/* curreently we assume its a CSS or JS File, so we strip comments and @namespace @moz-document... */

const enStripComments = /\/\*.*?\*\/|   *|\t/g
const enFixCSS   = /1111.11%/g


function enCacheExternalResource(stylesheet_uri, GM_variable) {
    GM_xmlhttpRequest({
        method: "GET",
        url: stylesheet_uri,
    
        onload: function(response) {
            //we get the file!, remove linebreaks and strip simple /*comments */
            var myResponse=response.responseText.replace(/\r\n/g, ' ').replace(enStripComments, '').replace(enFixCSS, "100%");
           
            
            if (DEBUG) console.log(myResponse);
            GM_setValue(GM_variable, '');
            GM_setValue(GM_variable, myResponse);
            addStyleString(myResponse);
        }
   });
}

// workaround for zepto (no .outerHeigth())
function getOuterHeight(el) {
  // Get the DOM Node if you pass in a string
  el = (typeof el === 'string') ? document.querySelector(el) : el; 

  var styles = window.getComputedStyle(el);
  var margin = parseFloat(styles['marginTop']) +
               parseFloat(styles['marginBottom']);

  return Math.ceil(el.offsetHeight + margin);
}

/*

{
  var _xhr = window.XMLHttpRequest;
  var has_cred = false;
  if (DEBUG) console.error('enCacheExternal URI: '+stylesheet_uri)
  try {has_cred = _xhr && ('withCredentials' in (new _xhr()));} catch(e) {}
  if (!has_cred) {
    console.error('CORS not supported');
    return;
  }
  var xhr = new _xhr();
  xhr.open('GET', stylesheet_uri);
  xhr.onload = function() {
    xhr.onload = xhr.onerror = null;
    if (xhr.status < 200 || xhr.status >=300) {
      console.error('style failed to load: ' + stylesheet_uri)
    } else {
      // modified to save to GM_variable!
      var myResponse=xhr.responseText.replace(/\r\n/g, ' ').replace(enStripComments, '');
      if (DEBUG) console.log(myResponse);
      GM_setValue(GM_variable, myResponse);
      addStyleString(myResponse);
    };
    xhr.onerror = function() {
      xhr.onload = xhr.onerror = null;
      console.error('XHR CORS CSS fail:' + styleURI);
    };
  }
    xhr.send();
}
    

// =========== Support functions for LATER use not needed for production !!!

/* Perfomance test code
var t0 = performance.now();
  //Code to test here ...
var t1 = performance.now();
console.error("Call XXXX took " + (t1 - t0) + " milliseconds.")
*/

/*
// from https://gist.github.com/TheDistantSea/8021359
// returns 0 on equal, 1 on v1 newer, -1 on v2 newer 
function versionCompare(v1, v2) {
    var lexicographical = false,
        zeroExtend = true,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) { return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x); }
    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {return NaN; }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push("0");
        while (v2parts.length < v1parts.length) v2parts.push("0");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) { return 1; }
        if (v1parts[i] == v2parts[i]) { continue; }
        else if (v1parts[i] > v2parts[i]) { return 1; }
        else { return -1; }
    }

    if (v1parts.length != v2parts.length) { return -1; }
    return 0;
}

*/
